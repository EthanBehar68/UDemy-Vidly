@{
    ViewBag.Title = "New Rental Form";
}

<h2>New Rental Form</h2>

<form id="newRental">
    <div class="form-group">
        <label>Customer</label>
        <div class="tt-container">
            <input id="customer" name="customer" data-rule-validCustomer="true" data-rule-validCustomerIsDelinquent="true" required type="text" value="" class="form-control" />
        </div>
        <div>
            <label id="customerDiscount"></label>
        </div>
    </div>

    <div class="form-group">
        <label>Movie</label>
        <div class="tt-container">
            <input id="movie" name="movie" data-rule-validMovie="true" data-rule-validTooManyMovies="true" type="text" value="" class="form-control" />

        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <ul id="movies" class="list-group" >
            </ul>
        </div>
    </div>
    <button class="btn btn-primary">Submit</button>
</form>

@*This isn't great JS code... its spaghetti
    We have mark up side-by-side business logic.
    This SHOULD be refactored but I will not be doing that
    But be aware I'm aware its not the cleanest code.
*@

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval");
    <script>
        $(document).ready(function () {

            var vm = {
                movieIds: []
            };

            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#customer').typeahead(
                {
                    minLenght: 3,
                    highlight: true,
                },
                {
                    name: 'customers',
                    display: 'name',
                    source: customers
                }
            ).on("typeahead:select", function (e, customer) {
                vm.customerId = customer.id;
                vm.delinquentStatus = customer.delinquent;
                $('#customerDiscount').text("Customer's discount is " + customer.membershipType.discountRate + "%");
            });

            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead(
                {
                    minLenght: 3,
                    highlight: true,
                },
                {
                    name: 'movies',
                    display: 'name',
                    source: movies
                }
            ).on("typeahead:select", function (e, movie) {
                $("#movies").append("<li class='list-group-item'>" + movie.name + "</li>");

                $("#movie").typeahead("val", "");

                vm.movieIds.push(movie.id);
            });

            $.validator.addMethod("validCustomer", function () {
                return vm.customerId && vm.customerId !== 0;

            }, "Please select a valid customer.");

            $.validator.addMethod("validCustomerIsDelinquent", function () {
                console.log(vm.customerId + " " + vm.delinquentStatus);
                return !vm.delinquentStatus;

            }, "Please resolve customer's delinquent status.");

            $.validator.addMethod("validMovie", function () {
                return vm.movieIds.length > 0;
            }, "Please select at least one movie.");

            // There's definitely a better way to do this... 
            // Like I would like to error the movie list instead of the movie input field
            // But for now I'll leave it on the movie input field
            // I probably won't come back to this.
            // The front-end logic is also broken b/c there's no 'remove movie' functionality
            // The clerk would have to refresh the page /shrug.
            $.validator.addMethod("validTooManyMovies", function () {
                return vm.movieIds.length < 3;
            }, "Customers can only rent three movies at once.");

            var validator = $("#newRental").validate({
                submitHandler: function () {
                    $.ajax({
                        url: "/api/NewRentals",
                        method: "post",
                        data: vm
                    })
                        .done(function () {
                            toastr.success("Rentals successfully recorded.");

                            $("#customer").typeahead("val", "");
                            $("#movie").typeahead("val", "");
                            $("#movies").empty();
                            $('#customerDiscount').empty();

                            vm = {
                                movieIds: []
                            };

                            validator.resetForm();
                        })
                        .fail(function () {
                            toastr.error("Something unexpected happened.");
                        });
                    return false;
                }
            });
        });
    </script>
}